// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package server

import (
	"github.com/jake-hansen/agora/api/handlers"
	"github.com/jake-hansen/agora/api/handlers/authhandler"
	"github.com/jake-hansen/agora/api/handlers/meetingplatformhandler"
	"github.com/jake-hansen/agora/api/handlers/userhandler"
	"github.com/jake-hansen/agora/api/middleware"
	"github.com/jake-hansen/agora/api/middleware/authmiddleware"
	"github.com/jake-hansen/agora/api/middleware/corsmiddleware"
	"github.com/jake-hansen/agora/config"
	"github.com/jake-hansen/agora/database"
	"github.com/jake-hansen/agora/database/repositories/meetingplatformrepo"
	"github.com/jake-hansen/agora/database/repositories/oauthinforepo"
	"github.com/jake-hansen/agora/database/repositories/userrepo"
	"github.com/jake-hansen/agora/log"
	"github.com/jake-hansen/agora/router"
	handlers2 "github.com/jake-hansen/agora/router/handlers"
	"github.com/jake-hansen/agora/services/jwtservice"
	"github.com/jake-hansen/agora/services/meetingplatforms"
	"github.com/jake-hansen/agora/services/meetingplatforms/zoom"
	"github.com/jake-hansen/agora/services/meetingplatformservice"
	"github.com/jake-hansen/agora/services/oauthinfoservice"
	"github.com/jake-hansen/agora/services/simpleauthservice"
	"github.com/jake-hansen/agora/services/userservice"
)

// Injectors from injector.go:

func Build() (*Server, func(), error) {
	viper := config.Provide()
	serverConfig, err := Cfg(viper)
	if err != nil {
		return nil, nil, err
	}
	zapConfig := log.Cfg(viper)
	logLog, cleanup, err := log.Provide(zapConfig)
	if err != nil {
		return nil, nil, err
	}
	corsConfig, err := corsmiddleware.Cfg(viper)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	corsMiddleware := corsmiddleware.Provide(corsConfig)
	v := middleware.ProvideAllProductionMiddleware(logLog, corsMiddleware)
	jwtserviceConfig, err := jwtservice.Cfg(viper)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	jwtServiceImpl := jwtservice.Provide(jwtserviceConfig)
	databaseConfig, err := database.Cfg(viper, logLog)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	db, cleanup2, err := database.ProvideGORM(databaseConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	manager, err := database.Provide(databaseConfig, db)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	userRepository := userrepo.Provide(manager)
	userService := userservice.Provide(userRepository)
	simpleAuthService := simpleauthservice.Provide(jwtServiceImpl, userService)
	authHandler := authhandler.Provide(simpleAuthService)
	userHandler := userhandler.Provide(userService)
	v2 := authmiddleware.ProvideAuthorizationHeaderParser()
	authMiddleware := authmiddleware.Provide(simpleAuthService, v2)
	meetingPlatformRepo := meetingplatformrepo.Provide(manager)
	zoomZoom := zoom.Provide()
	v3 := meetingplatforms.Provide(zoomZoom, viper)
	meetingPlatformService := meetingplatformservice.Provide(meetingPlatformRepo, v3)
	oAuthInfoRepo := oauthinforepo.Provide(manager)
	oAuthInfoService := oauthinfoservice.Provide(meetingPlatformService, oAuthInfoRepo)
	meetingPlatformHandler := meetingplatformhandler.Provide(authMiddleware, meetingPlatformService, oAuthInfoService)
	v4 := handlers.ProvideAllProductionHandlers(authHandler, userHandler, meetingPlatformHandler)
	handlerManager := handlers2.ProvideHandlerManager(v4)
	routerConfig, err := router.Cfg(viper, v, handlerManager)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	routerRouter := router.Provide(routerConfig)
	server := Provide(serverConfig, routerRouter)
	return server, func() {
		cleanup2()
		cleanup()
	}, nil
}
