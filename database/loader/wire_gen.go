// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package loader

import (
	"github.com/jake-hansen/agora/config"
	"github.com/jake-hansen/agora/database"
	"github.com/jake-hansen/agora/database/repositories/meetingplatformrepo"
	"github.com/jake-hansen/agora/log"
	"github.com/jake-hansen/agora/services/meetingplatforms"
	"github.com/jake-hansen/agora/services/meetingplatforms/zoom"
)

// Injectors from injector.go:

func Build() (*Loader, func(), error) {
	viper := config.Provide()
	zapConfig := log.Cfg(viper)
	logLog, cleanup, err := log.Provide(zapConfig)
	if err != nil {
		return nil, nil, err
	}
	databaseConfig, err := database.Cfg(viper, logLog)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	db, cleanup2, err := database.ProvideGORM(databaseConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	manager, err := database.Provide(databaseConfig, db)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	meetingPlatformRepo := meetingplatformrepo.Provide(manager)
	zoomZoom := zoom.Provide()
	v := meetingplatforms.Provide(zoomZoom, viper)
	meetingPlatformLoader := ProvideMeetingPlatformLoader(meetingPlatformRepo, v)
	loader := ProvideLoader(meetingPlatformLoader)
	return loader, func() {
		cleanup2()
		cleanup()
	}, nil
}
