// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package handlers

import (
	"github.com/jake-hansen/agora/api/handlers/authhandler"
	"github.com/jake-hansen/agora/api/handlers/meetingplatformhandler"
	"github.com/jake-hansen/agora/api/handlers/userhandler"
	"github.com/jake-hansen/agora/api/middleware/authmiddleware"
	"github.com/jake-hansen/agora/database"
	"github.com/jake-hansen/agora/database/repositories/meetingplatformrepo"
	"github.com/jake-hansen/agora/database/repositories/oauthinforepo"
	"github.com/jake-hansen/agora/database/repositories/userrepo"
	"github.com/jake-hansen/agora/router/handlers"
	"github.com/jake-hansen/agora/services/jwtservice"
	"github.com/jake-hansen/agora/services/meetingplatforms"
	"github.com/jake-hansen/agora/services/meetingplatforms/zoom"
	"github.com/jake-hansen/agora/services/meetingplatformservice"
	"github.com/jake-hansen/agora/services/oauthinfoservice"
	"github.com/jake-hansen/agora/services/simpleauthservice"
	"github.com/jake-hansen/agora/services/userservice"
	"github.com/spf13/viper"
)

// Injectors from injector.go:

func Build(db *database.Manager, v *viper.Viper) (*[]handlers.Handler, func(), error) {
	config, err := jwtservice.Cfg(v)
	if err != nil {
		return nil, nil, err
	}
	jwtServiceImpl := jwtservice.Provide(config)
	userRepository := userrepo.Provide(db)
	userService := userservice.Provide(userRepository)
	simpleAuthService := simpleauthservice.Provide(jwtServiceImpl, userService)
	authHandler := authhandler.Provide(simpleAuthService)
	userHandler := userhandler.Provide(userService)
	v2 := authmiddleware.ProvideAuthorizationHeaderParser()
	authMiddleware := authmiddleware.Provide(simpleAuthService, v2)
	meetingPlatformRepo := meetingplatformrepo.Provide(db)
	zoomZoom := zoom.Provide()
	configuredPlatforms := meetingplatforms.Provide(zoomZoom, v)
	meetingPlatformService := meetingplatformservice.Provide(meetingPlatformRepo, configuredPlatforms)
	oAuthInfoRepo := oauthinforepo.Provide(db)
	oAuthInfoService := oauthinfoservice.Provide(meetingPlatformService, oAuthInfoRepo)
	meetingPlatformHandler := meetingplatformhandler.Provide(authMiddleware, meetingPlatformService, oAuthInfoService)
	v3 := ProvideAllProductionHandlers(authHandler, userHandler, meetingPlatformHandler)
	return v3, func() {
	}, nil
}
